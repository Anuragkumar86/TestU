generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(uuid())
  name             String?
  email            String?       @unique
  password         String?
  coins            Int           @default(1000)
  totalScore       Int           @default(0)
  emailVerified    DateTime?     @map("email_verified")
  image            String?
  role             String        @default("USER")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @default(now()) @map("updated_at")
  resetToken       String?
  expireResetToken DateTime?
  accounts         Account[]
  quizAttempts     QuizAttempt[]
  sessions         Session[]

  @@map("users")
}

model Field {
  id     String  @id @default(cuid())
  name   String  @unique
  topics Topic[]
}

model Topic {
  id      String  @id @default(cuid())
  name    String  @unique
  fieldId String?
  quizzes Quiz[]
  field   Field?  @relation(fields: [fieldId], references: [id])
}

model Quiz {
  id           String        @id @default(cuid())
  title        String
  description  String
  timeLimit    Int
  topicId      String
  questions    Question[]
  topic        Topic         @relation(fields: [topicId], references: [id])
  quizAttempts QuizAttempt[]

  @@unique([topicId, title])
}

model Question {
  id            String   @id @default(cuid())
  text          String
  options       String[]
  correctAnswer String
  quizId        String
  quiz          Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model QuizAttempt {
  id          String   @id @default(cuid())
  score       Int
  timeTaken   Int
  userAnswers Json
  createdAt   DateTime @default(now())
  userId      String
  quizId      String
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
